var directions = L.mapquest.directions();
const form = document.getElementById('itinerary-form');

function directionsCallback(error, response) {
  console.log(response);
  form.insertAdjacentHTML('beforeend',`<p>Time: ${Math.round(response['route']['time']/60)} min Distance: ${Math.round(response['route']['distance']*10)/10} km</p>`);
  var directionsLayer = L.mapquest.directionsLayer({
    directionsResponse: response
  }).addTo(map);
  return map;
}


<% @issues.each do |issue| %>
L.marker([<%= issue.latitude %>, <%= issue.longitude %>], {
  icon: L.mapquest.icons.incident({
    shadow: true,
    size: 'md'
  })
}).addTo(map);
directions.findLinkId({
  "lng": <%= issue.longitude %>,
  "lat": <%= issue.latitude %>

}, findLinkIdCallback);
<% end %>
let linkIds = [];
function findLinkIdCallback(error, response) {
  linkIds.push(response.linkId);
  console.log(response.linkId);
}

console.log(linkIds);
console.log('<%= @route[:start] %>');


setTimeout(function() {
  directions.route({
    start: '<%= @route[:start] %>',
    end: '<%= @route[:end] %>',
    options: {
      avoidTimedConditions: false,
      ambiguities: "ignore",
      routeType: "bicycle",
      doReverseGeocode: false,
      enhancedNarrative: false,
      unit: "k",
      mustAvoidLinkIds: linkIds
    }

  }, directionsCallback);
}, 2500);

